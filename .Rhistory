dtrain$heat[dtrain$heat == 'Gravity Furnac'] = 'Wall Furnace'
dtrain$heat[dtrain$heat == 'No Data'] = 'Warm Cool'
#### GRADE ####
dtrain$grade[dtrain$grade=='Exceptional-A' | dtrain$grade=='Exceptional-B'|
dtrain$grade=='Exceptional-C' | dtrain$grade=='Exceptional-D'] = 'Excellent'
dtrain$grade[dtrain$grade=='Very Good'] = 'Superior'
dtrain$grade[dtrain$grade=='Above Average'] = 'Good Quality'
dtrain$grade[dtrain$grade=='Fair Quality'] = 'Average'
#### EXTWALL ####
dtrain$extwall[dtrain$extwall=='Default'] = 'Common Brick'
dtrain$extwall[dtrain$extwall=='Concrete Block'] = 'Concrete'
dtrain$extwall[dtrain$extwall=='Stucco Block'] = 'Stucco'
### ROOF ###
dtrain$roof[dtrain$roof=='Metal- Pre' | dtrain$roof=='Metal- Cpr' |
dtrain$roof=='Metal- Sms'] = 'Metal- Others'
dtrain$roof[dtrain$roof=='Typical'] = 'Comp Shingle'
dtrain$roof[dtrain$roof=='Clay Tile' | dtrain$roof=='Concrete Tile'] = 'Tile'
### INTWALL ###
dtrain$intwall[dtrain$intwall=='Default'] = 'Hardwood'
dtrain$intwall[dtrain$intwall=='Parquet'| dtrain$intwall=='Ceramic Tile'] = 'Others'
### NBHD ###
dtrain$nbhd <- as.character(dtrain$nbhd)
dtrain$nbhd[grepl("^A", dtrain$nbhd)] = 'A'
dtrain$nbhd[grepl("^B", dtrain$nbhd)] = 'B'
dtrain$nbhd[grepl("^C", dtrain$nbhd)] = 'C'
dtrain$nbhd[grepl("^D", dtrain$nbhd)] = 'D'
dtrain$nbhd[grepl("^E", dtrain$nbhd)] = 'E'
dtrain$nbhd[grepl("^F", dtrain$nbhd)] = 'F'
rm(list=ls())
load("smooth.Rdata")
org_dtrain <- dtrain
org_dtest <- dtest
dtrain$price = log(dtrain$price)
######################### FUNCTIONS ##############################
# function that calculates the mode of the categorical variable
catmode <- function(x) {
unique_values <- unique(x)
counts <- table(x)
mode_value <- unique_values[which.max(counts)]
return(mode_value)
}
###################################################################
############################ DTRAIN ###############################
############## From Project 1 ##############
#### saledate ####
dtrain$saledate <- as.numeric(as.Date(dtrain$saledate))
#### cndtn ####
dtrain$cndtn <- factor(dtrain$cndtn, levels=
c("Poor", "Fair", "Average", "Good", "Very Good", "Excellent"))
dtrain$cndtn <- as.numeric(dtrain$cndtn)
######################### NA OMIT ###########################
# Print columns with NA values
# names(which(colSums(is.na(dtrain)) > 0))
### Outputs:
###   "ayb" "yr_rmdl"  "stories"  "kitchens" "quadrant"
#### ayb ####
dtrain <- dtrain[-which(is.na(dtrain$ayb)),]
#### yr_rmd ####
dtrain$yr_rmdl[is.na(dtrain$yr_rmdl)] <- 0
#### stories ####
dtrain$stories[is.na(dtrain$stories)] <- median(dtrain$stories, na.rm=T)
#### kitchens ####
dtrain$kitchens[is.na(dtrain$kitchens)] <- median(dtrain$kitchens, na.rm=T)
#### quadrant ####
dtrain$quadrant[is.na(dtrain$quadrant)] <- catmode(dtrain$quadrant)
############################# DTEST ###############################
################## From Project 1 ################
#### saledate ####
dtest$saledate <- as.numeric(as.Date(dtest$saledate))
#### cndtn ####
dtest$cndtn <- factor(dtest$cndtn, levels=
c("Poor", "Fair", "Average", "Good", "Very Good", "Excellent"))
dtest$cndtn <- as.numeric(dtest$cndtn)
######################### NA OMIT ###########################
# Print columns with NA values
# names(which(colSums(is.na(dtrain)) > 0))
### Outputs:
###   "ayb" "yr_rmdl"  "stories"  "kitchens" "quadrant"
#### ayb ####
# dtest <- dtest[-which(is.na(dtest$ayb)),]
dtest$ayb <- median(dtest$ayb, na.rm=T)
#### yr_rmd ####
dtest$yr_rmdl[is.na(dtest$yr_rmdl)] <- 0
#### stories ####
dtest$stories[is.na(dtest$stories)] <- median(dtest$stories, na.rm=T)
#### kitchens ####
dtest$kitchens[is.na(dtest$kitchens)] <- median(dtest$kitchens, na.rm=T)
#### quadrant ####
dtest$quadrant[is.na(dtest$quadrant)] <- catmode(dtest$quadrant)
######################## OTHERS ################################
####### HEAT ######## (ONLY DTRAIN)
dtrain$heat[dtrain$heat == 'Air Exchng' | dtrain$heat == 'Air-Oil'] = 'Forced Air'
dtrain$heat[dtrain$heat == 'Elec Base Brd' | dtrain$heat == 'Evp Cool'] = 'Hot Water Rad'
dtrain$heat[dtrain$heat == 'Gravity Furnac'] = 'Wall Furnace'
dtrain$heat[dtrain$heat == 'No Data'] = 'Warm Cool'
#### GRADE ####
dtrain$grade[dtrain$grade=='Exceptional-A' | dtrain$grade=='Exceptional-B'|
dtrain$grade=='Exceptional-C' | dtrain$grade=='Exceptional-D'] = 'Excellent'
dtrain$grade[dtrain$grade=='Very Good'] = 'Superior'
dtrain$grade[dtrain$grade=='Above Average'] = 'Good Quality'
dtrain$grade[dtrain$grade=='Fair Quality'] = 'Average'
#### EXTWALL ####
dtrain$extwall[dtrain$extwall=='Default'] = 'Common Brick'
dtrain$extwall[dtrain$extwall=='Concrete Block'] = 'Concrete'
dtrain$extwall[dtrain$extwall=='Stucco Block'] = 'Stucco'
### ROOF ###
dtrain$roof[dtrain$roof=='Metal- Pre' | dtrain$roof=='Metal- Cpr' |
dtrain$roof=='Metal- Sms'] = 'Metal- Others'
dtrain$roof[dtrain$roof=='Typical'] = 'Comp Shingle'
dtrain$roof[dtrain$roof=='Clay Tile' | dtrain$roof=='Concrete Tile'] = 'Tile'
### INTWALL ###
dtrain$intwall[dtrain$intwall=='Default'] = 'Hardwood'
dtrain$intwall[dtrain$intwall=='Parquet'| dtrain$intwall=='Ceramic Tile'] = 'Others'
### NBHD ###
dtrain$nbhd <- as.character(dtrain$nbhd)
dtrain$nbhd[grepl("^A", dtrain$nbhd)] = 'A'
dtrain$nbhd[grepl("^B", dtrain$nbhd)] = 'B'
dtrain$nbhd[grepl("^C", dtrain$nbhd)] = 'C'
dtrain$nbhd[grepl("^D", dtrain$nbhd)] = 'D'
dtrain$nbhd[grepl("^E", dtrain$nbhd)] = 'E'
dtrain$nbhd[grepl("^F", dtrain$nbhd)] = 'F'
######################## OTHERS ################################
##### Style (ONLY DTEST) #####
dtest$style[dtest$style == 'Default'] = '2 Story'
#### GRADE ####
dtest$grade[dtest$grade=='Exceptional-A' | dtest$grade=='Exceptional-B'|
dtest$grade=='Exceptional-C' | dtest$grade=='Exceptional-D'] = 'Excellent'
dtest$grade[dtest$grade=='Very Good'] = 'Superior'
dtest$grade[dtest$grade=='Above Average'] = 'Good Quality'
dtest$grade[dtest$grade=='Fair Quality'] = 'Average'
### EXTWALL ###
dtest$extwall[dtest$extwall=='Stucco Block'] = 'Stucco'
### ROOF ###
dtest$roof[dtest$roof=='Metal- Sms'] = 'Metal- Others'
dtest$roof[dtest$roof=='Typical'] = 'Comp Shingle'
dtest$roof[dtest$roof=='Clay Tile'] = 'Tile'
### INTWALL ###
dtest$intwall[dtest$intwall=='Default'] = 'Hardwood'
dtest$intwall[dtest$intwall=='Terrazo'| dtest$intwall=='Vinyl Sheet'] = 'Others'
### NBHD ###
dtest$nbhd <- as.character(dtest$nbhd)
dtest$nbhd[grepl("^A", dtest$nbhd)] = 'A'
dtest$nbhd[grepl("^B", dtest$nbhd)] = 'B'
dtest$nbhd[grepl("^C", dtest$nbhd)] = 'C'
dtest$nbhd[grepl("^D", dtest$nbhd)] = 'D'
dtest$nbhd[grepl("^E", dtest$nbhd)] = 'E'
dtest$nbhd[grepl("^F", dtest$nbhd)] = 'F'
########################## SET AS FACTOR ##############################
## AC ##
# dtrain$ac <- ifelse(dtrain$ac=="N", 0 , 1)
# dtest$ac <- ifelse(dtest$ac=="N", 0 , 1)
dtrain$ac <- factor(dtrain$ac)
dtest$ac <- factor(dtest$ac)
## HEAT ##
dtrain$heat <- factor(dtrain$heat)
dtest$heat <- factor(dtest$heat)
## STYLE ##
dtrain$style <- factor(dtrain$style)
dtest$style <- factor(dtest$style)
# GRADE ##
dtrain$grade <- factor(dtrain$grade,
levels=c('Low Quality', 'Average', 'Good Quality', 'Superior', 'Excellent'))
dtest$grade <- factor(dtest$grade,
levels=c('Low Quality', 'Average', 'Good Quality', 'Superior', 'Excellent'))
dtrain$grade <- as.numeric(dtrain$grade)
dtest$grade <- as.numeric(dtest$grade)
# EXTWALL ##
dtrain$extwall <- factor(dtrain$extwall)
dtest$extwall <- factor(dtest$extwall)
## INTWALL ##
dtrain$intwall <- factor(dtrain$intwall)
dtest$intwall <- factor(dtest$intwall)
# ## ROOF ##
dtrain$roof <- factor(dtrain$roof)
dtest$roof <- factor(dtest$roof)
## NBHD ##
dtrain$nbhd <- factor(dtrain$nbhd)
dtest$nbhd <- factor(dtest$nbhd)
## WARD ##
dtrain$ward <- factor(dtrain$ward)
dtest$ward <- factor(dtest$ward)
## QUADRANT ##
dtrain$quadrant <- factor(dtrain$quadrant)
dtest$quadrant <- factor(dtest$quadrant)
#
# dtrain = subset(dtrain, select = -c(heat,style,extwall,intwall,roof,nbhd,ward,quadrant))
# dtest = subset(dtest, select = -c(heat,style,extwall,intwall,roof,nbhd,ward,quadrant))
rm(list=ls())
load("smooth.Rdata")
org_dtrain <- dtrain
org_dtest <- dtest
dtrain$price = log(dtrain$price)
######################### FUNCTIONS ##############################
# function that calculates the mode of the categorical variable
catmode <- function(x) {
unique_values <- unique(x)
counts <- table(x)
mode_value <- unique_values[which.max(counts)]
return(mode_value)
}
###################################################################
############################ DTRAIN ###############################
############## From Project 1 ##############
#### saledate ####
dtrain$saledate <- as.numeric(as.Date(dtrain$saledate))
#### cndtn ####
dtrain$cndtn <- factor(dtrain$cndtn, levels=
c("Poor", "Fair", "Average", "Good", "Very Good", "Excellent"))
dtrain$cndtn <- as.numeric(dtrain$cndtn)
######################### NA OMIT ###########################
# Print columns with NA values
# names(which(colSums(is.na(dtrain)) > 0))
### Outputs:
###   "ayb" "yr_rmdl"  "stories"  "kitchens" "quadrant"
#### ayb ####
dtrain <- dtrain[-which(is.na(dtrain$ayb)),]
#### yr_rmd ####
dtrain$yr_rmdl[is.na(dtrain$yr_rmdl)] <- 0
#### stories ####
dtrain$stories[is.na(dtrain$stories)] <- median(dtrain$stories, na.rm=T)
#### kitchens ####
dtrain$kitchens[is.na(dtrain$kitchens)] <- median(dtrain$kitchens, na.rm=T)
#### quadrant ####
dtrain$quadrant[is.na(dtrain$quadrant)] <- catmode(dtrain$quadrant)
############################# DTEST ###############################
################## From Project 1 ################
#### saledate ####
dtest$saledate <- as.numeric(as.Date(dtest$saledate))
#### cndtn ####
dtest$cndtn <- factor(dtest$cndtn, levels=
c("Poor", "Fair", "Average", "Good", "Very Good", "Excellent"))
dtest$cndtn <- as.numeric(dtest$cndtn)
######################### NA OMIT ###########################
# Print columns with NA values
# names(which(colSums(is.na(dtrain)) > 0))
### Outputs:
###   "ayb" "yr_rmdl"  "stories"  "kitchens" "quadrant"
#### ayb ####
# dtest <- dtest[-which(is.na(dtest$ayb)),]
dtest$ayb <- median(dtest$ayb, na.rm=T)
#### yr_rmd ####
dtest$yr_rmdl[is.na(dtest$yr_rmdl)] <- 0
#### stories ####
dtest$stories[is.na(dtest$stories)] <- median(dtest$stories, na.rm=T)
#### kitchens ####
dtest$kitchens[is.na(dtest$kitchens)] <- median(dtest$kitchens, na.rm=T)
#### quadrant ####
dtest$quadrant[is.na(dtest$quadrant)] <- catmode(dtest$quadrant)
######################## OTHERS ################################
####### HEAT ######## (ONLY DTRAIN)
dtrain$heat[dtrain$heat == 'Air Exchng' | dtrain$heat == 'Air-Oil'] = 'Forced Air'
dtrain$heat[dtrain$heat == 'Elec Base Brd' | dtrain$heat == 'Evp Cool'] = 'Hot Water Rad'
dtrain$heat[dtrain$heat == 'Gravity Furnac'] = 'Wall Furnace'
dtrain$heat[dtrain$heat == 'No Data'] = 'Warm Cool'
#### GRADE ####
dtrain$grade[dtrain$grade=='Exceptional-A' | dtrain$grade=='Exceptional-B'|
dtrain$grade=='Exceptional-C' | dtrain$grade=='Exceptional-D'] = 'Excellent'
dtrain$grade[dtrain$grade=='Very Good'] = 'Superior'
dtrain$grade[dtrain$grade=='Above Average'] = 'Good Quality'
dtrain$grade[dtrain$grade=='Fair Quality'] = 'Average'
#### EXTWALL ####
dtrain$extwall[dtrain$extwall=='Default'] = 'Common Brick'
dtrain$extwall[dtrain$extwall=='Concrete Block'] = 'Concrete'
dtrain$extwall[dtrain$extwall=='Stucco Block'] = 'Stucco'
### ROOF ###
dtrain$roof[dtrain$roof=='Metal- Pre' | dtrain$roof=='Metal- Cpr' |
dtrain$roof=='Metal- Sms'] = 'Metal- Others'
dtrain$roof[dtrain$roof=='Typical'] = 'Comp Shingle'
dtrain$roof[dtrain$roof=='Clay Tile' | dtrain$roof=='Concrete Tile'] = 'Tile'
### INTWALL ###
dtrain$intwall[dtrain$intwall=='Default'] = 'Hardwood'
dtrain$intwall[dtrain$intwall=='Parquet'| dtrain$intwall=='Ceramic Tile'] = 'Others'
### NBHD ###
dtrain$nbhd <- as.character(dtrain$nbhd)
dtrain$nbhd[grepl("^A", dtrain$nbhd)] = 'A'
dtrain$nbhd[grepl("^B", dtrain$nbhd)] = 'B'
dtrain$nbhd[grepl("^C", dtrain$nbhd)] = 'C'
dtrain$nbhd[grepl("^D", dtrain$nbhd)] = 'D'
dtrain$nbhd[grepl("^E", dtrain$nbhd)] = 'E'
dtrain$nbhd[grepl("^F", dtrain$nbhd)] = 'F'
######################## OTHERS ################################
##### Style (ONLY DTEST) #####
dtest$style[dtest$style == 'Default'] = '2 Story'
#### GRADE ####
dtest$grade[dtest$grade=='Exceptional-A' | dtest$grade=='Exceptional-B'|
dtest$grade=='Exceptional-C' | dtest$grade=='Exceptional-D'] = 'Excellent'
dtest$grade[dtest$grade=='Very Good'] = 'Superior'
dtest$grade[dtest$grade=='Above Average'] = 'Good Quality'
dtest$grade[dtest$grade=='Fair Quality'] = 'Average'
### EXTWALL ###
dtest$extwall[dtest$extwall=='Stucco Block'] = 'Stucco'
### ROOF ###
dtest$roof[dtest$roof=='Metal- Sms'] = 'Metal- Others'
dtest$roof[dtest$roof=='Typical'] = 'Comp Shingle'
dtest$roof[dtest$roof=='Clay Tile'] = 'Tile'
### INTWALL ###
dtest$intwall[dtest$intwall=='Default'] = 'Hardwood'
dtest$intwall[dtest$intwall=='Terrazo'| dtest$intwall=='Vinyl Sheet'] = 'Others'
### NBHD ###
dtest$nbhd <- as.character(dtest$nbhd)
dtest$nbhd[grepl("^A", dtest$nbhd)] = 'A'
dtest$nbhd[grepl("^B", dtest$nbhd)] = 'B'
dtest$nbhd[grepl("^C", dtest$nbhd)] = 'C'
dtest$nbhd[grepl("^D", dtest$nbhd)] = 'D'
dtest$nbhd[grepl("^E", dtest$nbhd)] = 'E'
dtest$nbhd[grepl("^F", dtest$nbhd)] = 'F'
########################## SET AS FACTOR ##############################
## AC ##
# dtrain$ac <- ifelse(dtrain$ac=="N", 0 , 1)
# dtest$ac <- ifelse(dtest$ac=="N", 0 , 1)
dtrain$ac <- factor(dtrain$ac)
dtest$ac <- factor(dtest$ac)
## HEAT ##
dtrain$heat <- factor(dtrain$heat)
dtest$heat <- factor(dtest$heat)
## STYLE ##
dtrain$style <- factor(dtrain$style)
dtest$style <- factor(dtest$style)
# GRADE ##
dtrain$grade <- factor(dtrain$grade,
levels=c('Low Quality', 'Average', 'Good Quality', 'Superior', 'Excellent'))
dtest$grade <- factor(dtest$grade,
levels=c('Low Quality', 'Average', 'Good Quality', 'Superior', 'Excellent'))
dtrain$grade <- as.numeric(dtrain$grade)
dtest$grade <- as.numeric(dtest$grade)
# EXTWALL ##
dtrain$extwall <- factor(dtrain$extwall)
dtest$extwall <- factor(dtest$extwall)
## INTWALL ##
dtrain$intwall <- factor(dtrain$intwall)
dtest$intwall <- factor(dtest$intwall)
# ## ROOF ##
dtrain$roof <- factor(dtrain$roof)
dtest$roof <- factor(dtest$roof)
## NBHD ##
dtrain$nbhd <- factor(dtrain$nbhd)
dtest$nbhd <- factor(dtest$nbhd)
## WARD ##
dtrain$ward <- factor(dtrain$ward)
dtest$ward <- factor(dtest$ward)
## QUADRANT ##
dtrain$quadrant <- factor(dtrain$quadrant)
dtest$quadrant <- factor(dtest$quadrant)
#
# dtrain = subset(dtrain, select = -c(heat,style,extwall,intwall,roof,nbhd,ward,quadrant))
# dtest = subset(dtest, select = -c(heat,style,extwall,intwall,roof,nbhd,ward,quadrant))
########################## MODEL BUILDING ########################
library(mgcv)
# Start with base model
f1 <- as.formula(price~ac+yr_rmdl+bathrm+hf_bathrm+rooms+bedrm+ayb+eyb+saledate+gba+
grade+cndtn+kitchens+fireplaces+longitude+latitude+stories)
m1 <- gam(f1, data=dtrain)
f2 <- as.formula(price~ac
+s(yr_rmdl)+s(bathrm, k=10)+s(hf_bathrm, k=5)+s(rooms, k=10)+s(bedrm, k=10)+s(ayb, k=50)
+s(eyb, k=50)+s(saledate)+s(gba, k=10)+s(grade, k=5)+s(cndtn, k=5)+s(kitchens, k=3)
+s(fireplaces, k=5)+s(longitude,k=10)+s(latitude, k=5)+s(stories, k=5))
m2 <- gam(f2, data=dtrain)
AIC(m1,m2)
# Final model
f_final <- as.formula(price~ac
+s(yr_rmdl)+s(bathrm, k=10)+s(hf_bathrm, k=5)+s(rooms, k=10)+s(bedrm, k=10)+s(ayb, k=50)
+s(eyb, k=50)+s(saledate)+s(gba, k=10)+s(grade, k=5)+s(cndtn, k=5)+s(kitchens, k=3)
+s(fireplaces, k=5)+s(longitude,k=10)+s(latitude, k=5)+s(stories, k=5)
+ti(grade, eyb)+ti(fireplaces, ayb)+
+te(longitude, latitude, k=10))
model_final <- gam(f_final, data=dtrain)
pred <- predict(m1, newdata=dtest)
res <- data.frame(Id=dtest$Id, price=exp(pred))
# summary(m1)
# gam.check(m1)
# s_mat <- ifelse(concurvity(m1, full=F)$worst > 0.9, 1, 0)
# write.csv(res, file="mysolution.csv", row.names=FALSE)
AIC(m2, model_final)
full=F)$worst > 0.9, 1, 0)
# summary(m1)
# gam.check(m1)
s_mat <- ifelse(concurvity(m1, full=F)$worst > 0.9, 1, 0)
m1 <- gam(f1, data=dtrain)
f2 <- as.formula(price~ac
+s(yr_rmdl)+s(bathrm, k=10)+s(hf_bathrm, k=5)+s(rooms, k=10)+s(bedrm, k=10)+s(ayb, k=50)
+s(eyb, k=50)+s(saledate)+s(gba, k=10)+s(grade, k=5)+s(cndtn, k=5)+s(kitchens, k=3)
+s(fireplaces, k=5)+s(longitude,k=10)+s(latitude, k=5)+s(stories, k=5))
m2 <- gam(f2, data=dtrain)
# summary(m1)
# gam.check(m1)
s_mat <- ifelse(concurvity(m1, full=F)$worst > 0.9, 1, 0)
# summary(m1)
# gam.check(m1)
s_mat <- ifelse(concurvity(m2, full=F)$worst > 0.9, 1, 0)
s_mat <- ifelse(concurvity(m2, full=F)$worst > 0.9, 1, 0)
s_mat <- ifelse(concurvity(m2, full=F)$worst > 0.9, 1, 0)
s_mat
summary(m2)
m2 <- gam(f2, data=dtrain)
########################## MODEL BUILDING ########################
library(mgcv)
AIC(m1,m2)
summary(m2)
gam.check(m2)
\begin{align*}
```{r}
```{r}
summary(model_final)
gam.check(model_final)
gam.check(m2)
summary(m1)
load("~/Documents/GitHub/STAT_441_Project/.RData")
sum(is.na(X_train))
sum(is.na(y_train))
which(is.na(X_train))
missing_indx <- which(is.na(X_train))
X_train[missing_indx]
setwd("~/Documents/GitHub/STAT_441_Project")
unique(X_train$v228b)
unique(X_train$v228b_r)
y_train <- read.csv("01-Data/y_train.csv", header=T)
unique(X_train$v228b)
unique(X_train$v228b_r)
X_train <- read.csv("01-Data/X_train.csv", header=T)
y_train <- read.csv("01-Data/y_train.csv", header=T)
unique(X_train$v228b)
unique(X_train$v228b_r)
X_train <- read.csv("01-Data/X_train.csv", header=T)
y_train <- read.csv("01-Data/y_train.csv", header=T)
X_test <- read.csv("01-Data/X_test.csv", header=T)
var <- c('v133_11c', 'v134_11c', 'v135_11c', 'v136_11c', 'v137_11c', 'v138_11c', 'v139_11c', 'v140_11c', 'v141_11c')
var_org <- c('v133', 'v134', 'v135', 'v136', 'v137', 'v138', 'v139', 'v140', 'v141')
access <- function(var1, var2) {
for (i in 1:9) {
print(paste(var_org[i],"vs", var[i]))
print(table(X_train[[var1[i]]], X_train[[var2[i]]]))
}
}
access(var, var_org)
View(X_train)
access <- function(var1, var2) {
for (i in 1:9) {
print(paste(var_org[i],"vs", var[i]))
print(table(X_train[[var1[i]]], X_train[[var2[i]]]))
}
}
#
access(var, var_org)
??xgboost
table(X_train$v174_LR)
table(X_train$v174_cs)
table(X_train$v175_LR)
ls
if(sum(X_train$v140 == -4) == sum(X_train$v140_11c, na.rm = TRUE)) {
# Find indices where v140 equals -4
indices <- which(X_train$v140 == -4)
# Replace -4 in v140 with the corresponding v140_11c values
X_train$v140[indices] <- X_train$v140_11c[indices]
# You might want to handle NA values in v140_11c if they exist,
# depending on how you wish to treat these cases.
} else {
warning("The total number of v140 == -4 does not equal the sum of v140_11c")
}
# Find indices where v140 equals -4
indices <- which(X_train$v140 == -4)
# Replace -4 in v140 with the corresponding v140_11c values
X_train$v140[indices] <- X_train$v140_11c[indices]
table(X_train$v140)
sum(X_train$v140)
X_train <- read.csv("01-Data/X_train.csv", header=T)
install.packages('fastDummies')
encoded_data <- model.matrix(~ v140 - 1, data=X_train)
View(encoded_data)
unique(X_train$v228b)
access <- function(var1, var2) {
for (i in 1:9) {
print(paste(var_org[i],"vs", var[i]))
print(table(X_train[[var1[i]]], X_train[[var2[i]]]))
}
}
#
access(var, var_org)
table(X_train$v139)
table(X_train$v139_11c)
table(X_test$v139)
table(X_test$v139_11c)
swap <- function(var1, var2) {
for (i in 1:9) {
if(X_train[[var1[i]]]==-4) {
X_train[[var1[i]]]=X_train[[var2[i]]]
}
}
}
swap(var, var_org)
swap <- function(var1, var2) {
for (i in 1:9) {
d1 <- X_train[[var1[i]]]
d2 <- X_train[[var2[i]]]
d1[d1 == -4] <- d2[d1 == -4]
}
}
swap(var, var_org)
table(X_train$v133)
table(X_train$v135)
table(X_train$v139)
swap(var, var_org)
table(X_train$v140)
table(X_train$v140_11c)
X_train$v140_11c[X_train$v140==-4]
table(X_train$v140_11c[X_train$v140==-4])
print(X_train$v140_11c[X_train$v140==-4])
print(X_train$v140_11c[X_train$v140==-4]==-4)
sum(X_train$v140_11c[X_train$v140==-4]==-4)
X_train$v140 = X_train$v140_11c[X_train$v140==-4]
X_train$v140[X_train$v140==-4] = X_train$v140_11c[X_train$v140==-4]
table(X_train$v140)
table(X_train$v140_11c)
